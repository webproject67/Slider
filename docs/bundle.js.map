{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/const.ts","webpack:///./src/scripts/components/view/abstract-view.ts","webpack:///./src/scripts/components/observer/observer.ts","webpack:///./src/scripts/index.ts","webpack:///./src/scripts/slider-jquery.ts","webpack:///./src/scripts/components/presenter/presenter.ts","webpack:///./src/scripts/components/model/model.ts","webpack:///./src/scripts/components/view/view.ts","webpack:///./src/scripts/components/view/track-view.ts","webpack:///./src/scripts/components/view/progress-view.ts","webpack:///./src/scripts/components/view/configuring-view.ts","webpack:///./src/scripts/components/view/scale-view.ts","webpack:///./src/scripts/components/view/flag-view.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NULL_VALUE","VERTICAL","HORIZONTAL","ONE","RANGE","FLAG","PROGRESS","MAX","MIN","SCALE","STEP","VIEW","TOGGLE_MINIMUM","TOGGLE_MAXIMUM","TOGGLE_VERTICAL_MINIMUM","TOGGLE_VERTICAL_MAXIMUM","ITEM","ITEM_MINIMUM","ITEM_MAXIMUM","getElement","model","this","elem","render","state","getUpdatedElement","getClassName","getTemplate","createElement","template","className","newElement","document","innerHTML","observers","subscribe","fn","push","broadcast","keys","values","forEach","subscriber","presenter","$","slider","options","obj","getState","setValue","extend","flag","from","fromPercent","max","min","progress","range","draft","start","configuring","scale","step","to","toPercent","view","each","main","init","bool","updateView","setMainToState","getPercentScale","getStepCount","stepCount","stepPercent","Math","ceil","percent","corner","str","stepPercentResult","round","getStepValue","val","generalValue","abs","getValue","firstValue","secondValue","Number","toFixed","boolFrom","boolMinMax","String","Boolean","mainName","id","importModules","importHandlers","showTrackView","showProgressView","showConfiguringView","showScaleView","showFlagView","replaceScreenConfiguring","replaceScreenProgress","replaceScreenScale","replaceScreenFlag","replaceScreenTrack","handleFlagMouseDown","evt","toggle","currentTarget","parentElement","flagClassNames","split","length","querySelector","replaceToggle","handleInputChange","input","inputMin","dataset","inputMax","inputStep","updateMinValue","updateMaxValue","updateStepValue","inputFlag","inputScale","inputProgress","checked","handleItemClick","stepList","boxLeft","offsetLeft","boxRight","clientWidth","boxTop","offsetTop","boxBottom","clientHeight","sliderLeft","window","pageXOffset","sliderWidth","sliderHeight","pageY","pageX","parseFloat","style","left","children","handleToggleMouseDown","configuringView","flagView","progressView","handleBarClick","scaleView","trackView","mouseMoveX","type","search","touches","setFromValue","setToValue","setPosition","mouseMoveY","replaceWith","preventDefault","onMouseMove","toggleMin","toggleMax","onMouseUp","removeEventListener","addEventListener","position","valuePercent","element","top","textContent","appendChild","items","querySelectorAll","it","item","display","valueStart","innerWithHeight","scaleWithHeight","rangeBol","viewHBol","viewVBol","bar","fromTemplate","toTemplate","listVertical","itemVertical","itemPlace","indexOf","flagMin","flagMax","rangeAndViewV"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","const NULL_VALUE = -10000;\nconst VERTICAL = 'vertical';\nconst HORIZONTAL = 'horizontal';\nconst ONE = 'one';\nconst RANGE = 'range';\nconst FLAG = 'flag';\nconst PROGRESS = 'progress';\nconst MAX = 'max';\nconst MIN = 'min';\nconst SCALE = 'scale';\nconst STEP = 'step';\nconst VIEW = 'view';\nconst TOGGLE_MINIMUM = 'slider__toggle_minimum';\nconst TOGGLE_MAXIMUM = 'slider__toggle_maximum';\nconst TOGGLE_VERTICAL_MINIMUM = 'slider__toggle_vertical-minimum';\nconst TOGGLE_VERTICAL_MAXIMUM = 'slider__toggle_vertical-maximum';\nconst ITEM = 'slider__item';\nconst ITEM_MINIMUM = 'slider__item_minimum';\nconst ITEM_MAXIMUM = 'slider__item_maximum';\n\nexport {\n  NULL_VALUE,\n  VERTICAL,\n  HORIZONTAL,\n  ONE,\n  RANGE,\n  FLAG,\n  PROGRESS,\n  MAX,\n  MIN,\n  SCALE,\n  STEP,\n  VIEW,\n  TOGGLE_MINIMUM,\n  TOGGLE_MAXIMUM,\n  TOGGLE_VERTICAL_MINIMUM,\n  TOGGLE_VERTICAL_MAXIMUM,\n  ITEM,\n  ITEM_MINIMUM,\n  ITEM_MAXIMUM,\n};\n","import { StateType, ModelType } from '../../types';\n\nexport default abstract class AbstractView {\n  private elem: HTMLElement | undefined;\n\n  public getElement(model: ModelType): HTMLElement {\n    if (this.elem) {\n      return this.elem;\n    }\n    this.elem = this.render(model.state);\n    this.bind(model);\n    return this.elem;\n  }\n\n  public getUpdatedElement(model: ModelType): HTMLElement {\n    this.elem = this.render(model.state);\n    this.bind(model);\n    return this.elem;\n  }\n\n  protected getClassName(state: StateType): string {\n    return '';\n  }\n\n  protected getTemplate(state: StateType): string {\n    return '';\n  }\n\n  protected bind(model: ModelType): void {}\n\n  private createElement(template: string, className: string): HTMLElement {\n    const newElement: HTMLElement = document.createElement('div');\n    newElement.className = className;\n    newElement.innerHTML = template;\n    return newElement;\n  }\n\n  private render(state: StateType): HTMLElement {\n    return this.createElement(\n      this.getTemplate(state),\n      this.getClassName(state)\n    );\n  }\n}\n","import { ModelType } from '../../types';\n\nexport default class Observer {\n  private observers: Function[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  public subscribe(fn: Function) {\n    this.observers.push(fn);\n  }\n\n  public broadcast(\n    keys: string[] | ModelType,\n    values?: (number | string | boolean)[] | boolean\n  ) {\n    this.observers.forEach((subscriber) => subscriber(keys, values));\n  }\n}\n","import './slider-jquery';\nimport '../styles/style.scss';\n","import Presenter from './components/presenter/presenter';\n\nlet presenter: Presenter;\n$.fn.slider = function f(options: object | string, obj?: object) {\n  if (options === 'getState') return presenter.model.getState();\n  if (options === 'setState') {\n    const keys = Object.keys(obj!);\n    const values = Object.values(obj!);\n    presenter.model.setValue(keys, values);\n    return null;\n  }\n  if (options === 'getConfiguring') {\n    presenter.model.setValue(['configuring'], [1]);\n    return null;\n  }\n\n  const state = $.extend(\n    {\n      flag: true,\n      from: -10000,\n      fromPercent: 0,\n      max: 100,\n      min: 0,\n      progress: true,\n      range: 'one',\n      draft: 0,\n      start: 1,\n      configuring: 0,\n      scale: true,\n      step: 1,\n      to: -10000,\n      toPercent: 100,\n      view: 'horizontal',\n    },\n    options\n  );\n\n  const cb = () => {\n    presenter = new Presenter(this[0], state);\n  };\n\n  return this.each(cb);\n};\n","import Model from '../model/model';\nimport View from '../view/view';\nimport { StateType, ModelType } from '../../types';\n\nexport default class Presenter {\n  public model: Model;\n\n  private view: View;\n\n  constructor(main: HTMLElement, state: StateType) {\n    this.model = new Model(main, state);\n    this.view = new View();\n    this.init();\n  }\n\n  private init() {\n    const cbView = (keys: string[], values: (number | string | boolean)[]) => {\n      this.model.setValue(keys, values);\n    };\n    this.view.subscribe(cbView);\n\n    const cbModel = (model: ModelType, bool: boolean) =>\n      this.view.updateView(model, bool);\n    this.model.subscribe(cbModel);\n\n    this.model.broadcast(this.model);\n  }\n}\n","import Observer from '../observer/observer';\nimport { StateType } from '../../types';\n\nexport default class Model extends Observer {\n  public state: StateType;\n\n  private main: HTMLElement;\n\n  constructor(main: HTMLElement, state: StateType) {\n    super();\n    this.main = main;\n    this.state = state;\n    this.setMainToState();\n  }\n\n  public getPercentScale() {\n    const { stepCount, stepPercent } = this.getStepCount(0);\n    let scale = 1;\n    if (stepCount > 20) scale = Math.ceil(stepCount / 20);\n    const percent = stepPercent * scale;\n    return {\n      percent,\n      stepPercent,\n      scale,\n    };\n  }\n\n  public getState(): StateType {\n    return this.state;\n  }\n\n  public getStepCount(corner: number, str?: string) {\n    const { min, max, step, toPercent, fromPercent } = this.state;\n    const stepCount: number = (max - min) / step;\n    const stepPercent: number = 100 / stepCount;\n    let stepPercentResult: number =\n      Math.round(corner / stepPercent) * stepPercent;\n    if (stepPercentResult < 0) stepPercentResult = 0;\n    if (corner > 100 || stepPercentResult > 100) stepPercentResult = 100;\n    if (str === 'toPercent') {\n      if (stepPercentResult > toPercent) stepPercentResult = toPercent;\n    }\n    if (str === 'fromPercent') {\n      if (fromPercent > stepPercentResult) stepPercentResult = fromPercent;\n    }\n    return {\n      stepCount,\n      stepPercent,\n      stepPercentResult,\n    };\n  }\n\n  public getStepValue(val: number) {\n    let value = val;\n    const { min, max } = this.state;\n    const generalValue = max - min;\n    if (value === 0) value = 1;\n    if (value < 0) value = Math.abs(value);\n    if (value > generalValue) value = generalValue;\n    return value;\n  }\n\n  public getValue(\n    percent: number,\n    firstValue?: number | null,\n    secondValue?: number | null\n  ) {\n    const { min, max, fromPercent } = this.state;\n    const { stepPercent } = this.getStepCount(0);\n    const value =\n      Number(((percent / stepPercent) * this.state.step).toFixed()) +\n      this.state.min;\n    const boolFrom = percent >= fromPercent;\n    const boolMinMax = (firstValue || min) >= (secondValue || max);\n    return {\n      min,\n      max,\n      value,\n      boolFrom,\n      boolMinMax,\n    };\n  }\n\n  public setValue(keys: string[], values: (number | string | boolean)[]) {\n    keys.forEach((key, i) => {\n      switch (key) {\n        case 'min':\n          this.state.min = Number(values[i]);\n          this.broadcast(this);\n          break;\n        case 'max':\n          this.state.max = Number(values[i]);\n          this.broadcast(this);\n          break;\n        case 'step':\n          this.state.step = Number(values[i]);\n          this.broadcast(this);\n          break;\n        case 'to':\n          this.state.to = Number(values[i]);\n          this.broadcast(this, true);\n          break;\n        case 'toPercent':\n          this.state.toPercent = Number(values[i]);\n          this.broadcast(this, true);\n          break;\n        case 'draft':\n          this.state.draft = Number(values[i]);\n          this.broadcast(this);\n          break;\n        case 'start':\n          this.state.start = Number(values[i]);\n          break;\n        case 'configuring':\n          this.state.configuring = Number(values[i]);\n          this.broadcast(this);\n          break;\n        case 'from':\n          this.state.from = Number(values[i]);\n          this.broadcast(this, true);\n          break;\n        case 'fromPercent':\n          this.state.fromPercent = Number(values[i]);\n          this.broadcast(this, true);\n          break;\n        case 'view':\n          this.state.view = String(values[i]);\n          this.broadcast(this);\n          break;\n        case 'range':\n          this.state.range = String(values[i]);\n          this.broadcast(this);\n          break;\n        case 'flag':\n          this.state.flag = Boolean(values[i]);\n          this.broadcast(this);\n          break;\n        case 'progress':\n          this.state.progress = Boolean(values[i]);\n          this.broadcast(this);\n          break;\n        case 'scale':\n          this.state.scale = Boolean(values[i]);\n          this.broadcast(this);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  private setMainToState(): void {\n    this.state.main = this.main;\n    this.state.mainName = this.main.className\n      ? `.${this.main.className}`\n      : `#${this.main.id}`;\n  }\n}\n","import Observer from '../observer/observer';\nimport TrackView from './track-view';\nimport ProgressView from './progress-view';\nimport ConfiguringView from './configuring-view';\nimport ScaleView from './scale-view';\nimport FlagView from './flag-view';\nimport {\n  MIN,\n  MAX,\n  STEP,\n  VIEW,\n  RANGE,\n  FLAG,\n  SCALE,\n  PROGRESS,\n  TOGGLE_MINIMUM,\n  TOGGLE_MAXIMUM,\n  TOGGLE_VERTICAL_MINIMUM,\n  TOGGLE_VERTICAL_MAXIMUM,\n  ITEM,\n  ITEM_MINIMUM,\n  ITEM_MAXIMUM,\n  HORIZONTAL,\n} from '../../const';\nimport { ModelType } from '../../types';\n\nexport default class Views extends Observer {\n  public trackView!: TrackView;\n\n  public progressView!: ProgressView;\n\n  public configuringView!: ConfiguringView;\n\n  public scaleView!: ScaleView;\n\n  public flagView!: FlagView;\n\n  constructor() {\n    super();\n    this.importModules();\n    this.importHandlers();\n  }\n\n  public updateView(model: ModelType, bool: boolean) {\n    if (model.state.start) {\n      this.showTrackView(model);\n      this.showProgressView(model);\n      this.showConfiguringView(model);\n      this.showScaleView(model);\n      this.showFlagView(model);\n      this.broadcast(['start'], [0]);\n      return;\n    }\n\n    if (bool) {\n      this.replaceScreenConfiguring(model);\n      this.replaceScreenProgress(model);\n      return;\n    }\n\n    this.replaceScreenScale(model);\n    this.replaceScreenFlag(model);\n    this.replaceScreenProgress(model);\n    this.replaceScreenConfiguring(model);\n    this.replaceScreenTrack(model);\n    this.showScaleView(model);\n    this.showProgressView(model);\n    this.showFlagView(model);\n    this.showConfiguringView(model);\n  }\n\n  private handleFlagMouseDown(model: ModelType, evt: Event): void {\n    const flag: HTMLElement = <HTMLElement>evt.currentTarget;\n    const slider: HTMLElement = flag.parentElement!.parentElement!;\n    const flagClassNames = flag.className.split(' ');\n    const flagClassNamesLength = flagClassNames.length;\n    let toggle!: HTMLElement;\n\n    switch (flagClassNames[flagClassNamesLength - 1]) {\n      case 'slider__flag_minimum':\n        toggle = slider.querySelector('.slider__toggle_minimum')!;\n        break;\n      case 'slider__flag_maximum':\n        toggle = slider.querySelector('.slider__toggle_maximum')!;\n        break;\n      case 'slider__flag-vertical_minimum':\n        toggle = slider.querySelector('.slider__toggle_vertical-minimum')!;\n        break;\n      case 'slider__flag-vertical_maximum':\n        toggle = slider.querySelector('.slider__toggle_vertical-maximum')!;\n        break;\n      default:\n        break;\n    }\n\n    this.replaceToggle(model, evt, toggle);\n  }\n\n  private handleInputChange(model: ModelType, evt: Event): void {\n    const input: HTMLElement = <HTMLElement>evt.currentTarget;\n    const inputMin = input.dataset.name === MIN;\n    const inputMax = input.dataset.name === MAX;\n    const inputStep = input.dataset.name === STEP;\n    const generalInput = inputMin || inputMax || inputStep;\n\n    if (generalInput) {\n      this.updateMinValue(model, input);\n      this.updateMaxValue(model, input);\n      this.updateStepValue(model, input);\n    }\n\n    if (input.dataset.name === VIEW) {\n      this.broadcast([input.dataset.name], [(<HTMLInputElement>input).value]);\n    }\n\n    if (input.dataset.name === RANGE) {\n      const { min } = model.getValue(0);\n      this.broadcast(\n        [input.dataset.name, 'from', 'fromPercent'],\n        [(<HTMLInputElement>input).value, min, 0]\n      );\n    }\n\n    const inputFlag = input.dataset.name === FLAG;\n    const inputScale = input.dataset.name === SCALE;\n    const inputProgress = input.dataset.name === PROGRESS;\n    const generalInput2 = inputFlag || inputScale || inputProgress;\n\n    if (generalInput2) {\n      this.broadcast(\n        [input.dataset.name!],\n        [(<HTMLInputElement>input).checked]\n      );\n    }\n  }\n\n  private handleItemClick(\n    model: ModelType,\n    evt: Event & { pageX?: number; pageY?: number }\n  ): void {\n    const scale: HTMLElement = <HTMLElement>evt.currentTarget;\n    const stepList: HTMLElement = scale.parentElement!;\n    const slider: HTMLElement = stepList.parentElement!;\n    const boxLeft: number = slider.offsetLeft;\n    const boxRight: number = boxLeft + slider.clientWidth;\n    const boxTop: number = slider.offsetTop;\n    const boxBottom: number = boxTop + slider.clientHeight;\n    const sliderLeft: number = boxLeft + window.pageXOffset;\n    const sliderWidth: number = boxRight - boxLeft;\n    const sliderHeight: number = boxBottom - boxTop;\n    let corner: number;\n\n    if (stepList.className.split(' ')[1]) {\n      corner = ((evt.pageY! - boxTop) / sliderHeight) * 100;\n    } else {\n      corner = ((evt.pageX! - sliderLeft) / sliderWidth) * 100;\n    }\n\n    if (scale.className === ITEM) corner = parseFloat(scale.style.left);\n\n    let { stepPercentResult } = model.getStepCount(corner);\n\n    if (scale.children.length) {\n      if (scale.children[0].className.split(' ')[1] === ITEM_MINIMUM)\n        stepPercentResult = 0;\n      if (scale.children[0].className.split(' ')[1] === ITEM_MAXIMUM)\n        stepPercentResult = 100;\n    }\n    const { value, boolFrom } = model.getValue(stepPercentResult);\n\n    if (boolFrom) {\n      this.broadcast(\n        ['toPercent', 'to', 'draft'],\n        [stepPercentResult, value, 0]\n      );\n    } else {\n      this.broadcast(\n        ['fromPercent', 'from', 'draft'],\n        [stepPercentResult, value, 0]\n      );\n    }\n  }\n\n  private handleToggleMouseDown(model: ModelType, evt: Event): void {\n    const toggle: HTMLElement = <HTMLElement>evt.currentTarget;\n    this.replaceToggle(model, evt, toggle);\n  }\n\n  private importHandlers(): void {\n    this.configuringView.handleInputChange = (model, evt) => {\n      this.handleInputChange(model, evt);\n    };\n\n    this.flagView.handleFlagMouseDown = (model, evt) => {\n      this.handleFlagMouseDown(model, evt);\n    };\n\n    this.progressView.handleBarClick = (model, evt) => {\n      this.handleItemClick(model, evt);\n    };\n\n    this.scaleView.handleItemClick = (model, evt) => {\n      this.handleItemClick(model, evt);\n    };\n\n    this.trackView.handleToggleMouseDown = (model, evt) => {\n      this.handleToggleMouseDown(model, evt);\n    };\n  }\n\n  private importModules(): void {\n    this.trackView = new TrackView();\n    this.progressView = new ProgressView();\n    this.configuringView = new ConfiguringView();\n    this.scaleView = new ScaleView();\n    this.flagView = new FlagView();\n  }\n\n  private mouseMoveX(\n    model: ModelType,\n    evt: Event & { touches?: TouchList; pageX?: number },\n    slider: HTMLElement,\n    toggle: HTMLElement\n  ) {\n    const boxLeft: number = slider.offsetLeft;\n    const boxRight: number = boxLeft + slider.clientWidth;\n    const sliderLeft: number = boxLeft + window.pageXOffset;\n    const sliderWidth: number = boxRight - boxLeft;\n    let value!: number;\n    let stepPercentResult!: number;\n    let flag!: HTMLElement;\n    const getEvent = () =>\n      evt.type.search('touch') !== -1 ? evt.touches![0] : evt;\n    const event = getEvent();\n    const corner: number = ((event.pageX! - sliderLeft) / sliderWidth) * 100;\n\n    if (toggle.className.split(' ')[1] === TOGGLE_MINIMUM) {\n      value = this.setFromValue(model, corner).value;\n      stepPercentResult = this.setFromValue(model, corner).stepPercentResult;\n      flag = <HTMLElement>slider.querySelector('.slider__flag_minimum');\n    }\n\n    if (toggle.className.split(' ')[1] === TOGGLE_MAXIMUM) {\n      value = this.setToValue(model, corner).value;\n      stepPercentResult = this.setToValue(model, corner).stepPercentResult;\n      flag = <HTMLElement>slider.querySelector('.slider__flag_maximum');\n    }\n    if (flag)\n      this.setPosition(flag, 'horizontal', stepPercentResult, String(value));\n    this.setPosition(toggle, 'horizontal', stepPercentResult);\n  }\n\n  private mouseMoveY(\n    model: ModelType,\n    evt: Event & { touches?: TouchList; pageY?: number },\n    slider: HTMLElement,\n    toggle: HTMLElement\n  ) {\n    const boxTop: number = slider.offsetTop;\n    const boxBottom: number = boxTop + slider.clientHeight;\n    const sliderHeight: number = boxBottom - boxTop;\n    let value!: number;\n    let stepPercentResult!: number;\n    let flag!: HTMLElement;\n    const getEvent = () =>\n      evt.type.search('touch') !== -1 ? evt.touches![0] : evt;\n    const event = getEvent();\n    const corner: number = ((event.pageY! - boxTop) / sliderHeight) * 100;\n\n    if (toggle.className.split(' ')[1] === TOGGLE_VERTICAL_MINIMUM) {\n      value = this.setFromValue(model, corner).value;\n      stepPercentResult = this.setFromValue(model, corner).stepPercentResult;\n      flag = <HTMLElement>(\n        slider.querySelector('.slider__flag-vertical_minimum')\n      );\n    }\n\n    if (toggle.className.split(' ')[1] === TOGGLE_VERTICAL_MAXIMUM) {\n      value = this.setToValue(model, corner).value;\n      stepPercentResult = this.setToValue(model, corner).stepPercentResult;\n      flag = <HTMLElement>(\n        slider.querySelector('.slider__flag-vertical_maximum')\n      );\n    }\n    if (flag)\n      this.setPosition(flag, 'vertical', stepPercentResult, String(value));\n    this.setPosition(toggle, 'vertical', stepPercentResult);\n  }\n\n  private replaceScreenConfiguring(model: ModelType): void {\n    this.configuringView\n      .getElement(model)\n      .replaceWith(this.configuringView.getUpdatedElement(model));\n  }\n\n  private replaceScreenFlag(model: ModelType): void {\n    this.flagView\n      .getElement(model)\n      .replaceWith(this.flagView.getUpdatedElement(model));\n  }\n\n  private replaceScreenProgress(model: ModelType): void {\n    this.progressView\n      .getElement(model)\n      .replaceWith(this.progressView.getUpdatedElement(model));\n  }\n\n  private replaceScreenScale(model: ModelType): void {\n    this.scaleView\n      .getElement(model)\n      .replaceWith(this.scaleView.getUpdatedElement(model));\n  }\n\n  private replaceScreenTrack(model: ModelType): void {\n    this.trackView\n      .getElement(model)\n      .replaceWith(this.trackView.getUpdatedElement(model));\n  }\n\n  private replaceToggle(\n    model: ModelType,\n    evt: Event,\n    toggle: HTMLElement\n  ): void {\n    evt.preventDefault();\n    const slider: HTMLElement = toggle.parentElement!;\n    let onMouseMove: { (evt: Event): void };\n    const toggleMin = toggle.className.split(' ')[1] === TOGGLE_MINIMUM;\n    const toggleMax = toggle.className.split(' ')[1] === TOGGLE_MAXIMUM;\n    const toggleBol = toggleMin || toggleMax;\n\n    if (toggleBol) {\n      onMouseMove = (evt: Event): void =>\n        this.mouseMoveX(model, evt, slider, toggle);\n    } else {\n      onMouseMove = (evt: Event): void =>\n        this.mouseMoveY(model, evt, slider, toggle);\n    }\n\n    const onMouseUp = () => {\n      document.removeEventListener('touchmove', onMouseMove);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('touchend', onMouseUp);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n\n    document.addEventListener('touchmove', onMouseMove);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('touchend', onMouseUp);\n    document.addEventListener('mouseup', onMouseUp);\n  }\n\n  private setFromValue(model: ModelType, corner: number) {\n    const { stepPercentResult } = model.getStepCount(corner, 'toPercent');\n    const { value } = model.getValue(stepPercentResult);\n    this.broadcast(['fromPercent', 'from'], [stepPercentResult, value]);\n    return {\n      value,\n      stepPercentResult,\n    };\n  }\n\n  private setPosition(\n    elem: HTMLElement,\n    position: string,\n    valuePercent: number,\n    value?: string\n  ) {\n    const element = elem;\n    if (position === HORIZONTAL) {\n      element.style.left = `${String(valuePercent)}%`;\n    } else {\n      element.style.top = `${String(valuePercent)}%`;\n    }\n    if (value) element.textContent = value;\n  }\n\n  private setToValue(model: ModelType, corner: number) {\n    const { stepPercentResult } = model.getStepCount(corner, 'fromPercent');\n    const { value } = model.getValue(stepPercentResult);\n    this.broadcast(['toPercent', 'to'], [stepPercentResult, value]);\n    return {\n      value,\n      stepPercentResult,\n    };\n  }\n\n  private showConfiguringView(model: ModelType): void {\n    if (model.state.configuring) {\n      model.state\n        .main!.querySelector('.slider__wrapper')!\n        .appendChild(this.configuringView.getElement(model));\n    }\n  }\n\n  private showFlagView(model: ModelType): void {\n    if (model.state.flag) {\n      model.state\n        .main!.querySelector('.slider__inner')!\n        .appendChild(this.flagView.getElement(model));\n    }\n  }\n\n  private showProgressView(model: ModelType): void {\n    if (model.state.progress) {\n      model.state\n        .main!.querySelector('.slider__scale')!\n        .appendChild(this.progressView.getElement(model));\n    }\n  }\n\n  private showScaleView(model: ModelType): void {\n    if (model.state.scale) {\n      model.state\n        .main!.querySelector('.slider__inner')!\n        .appendChild(this.scaleView.getElement(model));\n      const items = model.state\n        .main!.querySelector('.slider__inner')!\n        .querySelectorAll('.slider__item:not(:first-child):not(:last-child)');\n      let { percent } = model.getPercentScale();\n      const { stepPercent, scale } = model.getPercentScale();\n      items.forEach((it) => {\n        const item = it;\n        if (percent > 99) {\n          (<HTMLElement>item).style.display = 'none';\n          return;\n        }\n        const { value } = model.getValue(percent);\n        if (scale !== 1) item.children[0].textContent = String(value);\n        (<HTMLElement>item).style.left = `${percent}%`;\n        percent += stepPercent * scale;\n      });\n    }\n  }\n\n  private showTrackView(model: ModelType): void {\n    model.state.main!.appendChild(this.trackView.getElement(model));\n  }\n\n  private updateMaxValue(model: ModelType, input: HTMLElement) {\n    const max: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__max')\n      )).value\n    );\n    const { min, boolMinMax } = model.getValue(0, null, max);\n    if (boolMinMax) {\n      this.broadcast(['max', 'to', 'toPercent'], [min + 1, min + 1, 100]);\n    } else {\n      this.broadcast(['max', 'to', 'toPercent'], [max, max, 100]);\n    }\n  }\n\n  private updateMinValue(model: ModelType, input: HTMLElement) {\n    const min: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__min')\n      )).value\n    );\n    const { max, boolMinMax } = model.getValue(0, min, null);\n    if (boolMinMax) {\n      this.broadcast(['min', 'from', 'fromPercent'], [max - 1, max - 1, 0]);\n    } else {\n      this.broadcast(['min', 'from', 'fromPercent'], [min, min, 0]);\n    }\n  }\n\n  private updateStepValue(model: ModelType, input: HTMLElement) {\n    const valueStart: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__step')\n      )).value\n    );\n    const value = model.getStepValue(valueStart);\n    this.broadcast(['step'], [value]);\n  }\n}\n","import AbstractView from './abstract-view';\nimport { RANGE, HORIZONTAL, VERTICAL } from '../../const';\nimport { ModelType, StateType } from '../../types';\n\nexport default class TrackView extends AbstractView {\n  getClassName() {\n    return 'slider__wrapper';\n  }\n\n  getTemplate(state: StateType) {\n    const { fromPercent, toPercent, range, view } = state;\n    let innerWithHeight = '';\n    let scaleWithHeight = '';\n    let toggleMin = '';\n    let toggleMax = 'slider__toggle_maximum';\n    let position = 'left';\n    const rangeBol = range === RANGE;\n    const viewHBol = view === HORIZONTAL;\n    const viewVBol = view === VERTICAL;\n    const rangeAndViewH = rangeBol && viewHBol;\n    const rangeAndViewV = rangeBol && viewVBol;\n\n    if (rangeAndViewH) {\n      toggleMin = `<div class=\"slider__toggle slider__toggle_minimum\" style=\"left:${fromPercent}%\"></div>`;\n    }\n\n    if (rangeAndViewV) {\n      toggleMin = `<div class=\"slider__toggle slider__toggle_vertical-minimum\" style=\"top:${fromPercent}%\"></div>`;\n    }\n\n    if (viewVBol) {\n      innerWithHeight = 'slider__inner_with-height';\n      scaleWithHeight = 'slider__scale_with-height';\n      toggleMax = 'slider__toggle_vertical-maximum';\n      position = 'top';\n    }\n\n    return `\n      <div class=\"slider__inner ${innerWithHeight}\">\n        <div class=\"slider__scale ${scaleWithHeight}\">\n        </div>\n        ${toggleMin}\n        <div class=\"slider__toggle ${toggleMax}\" style=\"${position}:${toPercent}%\"></div>\n      </div>\n    `;\n  }\n\n  bind(model: ModelType) {\n    this.getElement(model)\n      .querySelectorAll('.slider__toggle')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'touchstart',\n          this.handleToggleMouseDown.bind(null, model)\n        )\n      );\n    this.getElement(model)\n      .querySelectorAll('.slider__toggle')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'mousedown',\n          this.handleToggleMouseDown.bind(null, model)\n        )\n      );\n  }\n\n  public handleToggleMouseDown(model: ModelType, evt: Event): void {}\n}\n","import AbstractView from './abstract-view';\nimport { VERTICAL } from '../../const';\nimport { ModelType, StateType } from '../../types';\n\nexport default class ProgressView extends AbstractView {\n  getClassName() {\n    return 'slider__bars';\n  }\n\n  getTemplate(state: StateType) {\n    const { fromPercent, toPercent, view } = state;\n    let bar = `<div class=\"slider__bar\" style=\"margin-left:${fromPercent}%;margin-right:${\n      100 - toPercent\n    }%\"></div>`;\n\n    if (view === VERTICAL) {\n      bar = `<div class=\"slider__bar slider__bar_with-width\" style=\"top:${fromPercent}%;height:${\n        toPercent - fromPercent\n      }%\"></div>`;\n    }\n\n    return `${bar}`;\n  }\n\n  bind(model: ModelType) {\n    this.getElement(model).addEventListener(\n      'click',\n      this.handleBarClick.bind(null, model)\n    );\n  }\n\n  public handleBarClick(model: ModelType, evt: Event): void {}\n}\n","import AbstractView from './abstract-view';\nimport { NULL_VALUE, HORIZONTAL, VERTICAL, ONE, RANGE } from '../../const';\nimport { ModelType, StateType } from '../../types';\n\nexport default class ConfiguringView extends AbstractView {\n  getClassName() {\n    return 'slider__inputs';\n  }\n\n  getTemplate(state: StateType) {\n    const {\n      range,\n      from,\n      min,\n      max,\n      to,\n      step,\n      view,\n      flag,\n      scale,\n      progress,\n      mainName,\n    } = state;\n    let fromTemplate = '';\n    let toTemplate = 'Текущее значение';\n\n    if (range === RANGE) {\n      fromTemplate = `\n        <div class=\"slider__input\">\n          <label class=\"slider__label\" for=\"from${mainName}\">От</label>\n          <br>\n          <input data-name=\"from\" class=\"slider__from slider__number\" type=\"number\" value=${\n            from === NULL_VALUE ? min : from\n          } id=\"from${mainName}\" readonly>\n        </div>\n      `;\n      toTemplate = 'До';\n    }\n\n    return `\n      <div class=\"slider__input\">\n        <label class=\"slider__label\" for=\"min${mainName}\">Минимальное значение</label>\n        <br>\n        <input data-name=\"min\" class=\"slider__min slider__number\" type=\"number\" value=${min} id=\"min${mainName}\">\n      </div>\n      <div class=\"slider__input\">\n        <label class=\"slider__label\" for=\"max${mainName}\">Максимальное значение</label>\n        <br>\n        <input data-name=\"max\" class=\"slider__max slider__number\" type=\"number\" value=${max} id=\"max${mainName}\">\n      </div>\n      ${fromTemplate}\n      <div class=\"slider__input\">\n        <label class=\"slider__label\" for=\"to${mainName}\">${toTemplate}</label>\n        <br>\n        <input data-name=\"to\" class=\"slider__to slider__number\" type=\"number\" value=${\n          to === NULL_VALUE ? max : to\n        } id=\"to${mainName}\" readonly>\n      </div>\n      <div class=\"slider__input\">\n        <label class=\"slider__label\" for=\"step${mainName}\">Шаг</label>\n        <br>\n        <input data-name=\"step\" class=\"slider__step slider__number\" type=\"number\" value=${step} id=\"step${mainName}\">\n      </div>\n      <div class=\"slider__input\">\n        <input data-name=\"view\" class=\"slider__view\" type=\"radio\" name=\"view${mainName}\" value=\"horizontal\" id=\"horizontal${mainName}\" ${\n      view === HORIZONTAL ? 'checked' : ''\n    }>\n        <label for=\"horizontal${mainName}\">Горизонтальный</label>\n        <input data-name=\"view\" class=\"slider__view\" type=\"radio\" name=\"view${mainName}\" value=\"vertical\" id=\"vertical${mainName}\" ${\n      view === VERTICAL ? 'checked' : ''\n    }>\n        <label for=\"vertical${mainName}\">Вертикальный</label>\n      </div>\n      <div class=\"slider__input\">\n        <input data-name=\"range\" class=\"slider__range\" type=\"radio\" name=\"range${mainName}\" value=\"one\" id=\"one${mainName}\" ${\n      range === ONE ? 'checked' : ''\n    }>\n        <label for=\"one${mainName}\">Одиночное значение</label>\n        <input data-name=\"range\" class=\"slider__range\" type=\"radio\" name=\"range${mainName}\" value=\"range\" id=\"range${mainName}\" ${\n      range === RANGE ? 'checked' : ''\n    }>\n        <label for=\"range${mainName}\">Интервал</label>\n      </div>\n      <div class=\"slider__input\">\n        <input data-name=\"flag\" class=\"slider__flag-checkbox\" type=\"checkbox\" id=\"flag${mainName}\" ${\n      flag ? 'checked' : ''\n    }>\n        <label for=\"flag${mainName}\">Значение</label>\n      </div>\n      <div class=\"slider__input\">\n        <input data-name=\"scale\" class=\"slider__scale-checkbox\" type=\"checkbox\" id=\"scale${mainName}\" ${\n      scale ? 'checked' : ''\n    }>\n        <label for=\"scale${mainName}\">Шкала</label>\n      </div>\n      <div class=\"slider__input\">\n        <input data-name=\"progress\" class=\"slider__progress-checkbox\" type=\"checkbox\" id=\"progress${mainName}\" ${\n      progress ? 'checked' : ''\n    }>\n        <label for=\"progress${mainName}\">Прогресс</label>\n      </div>\n    `;\n  }\n\n  bind(model: ModelType) {\n    this.getElement(model)\n      .querySelectorAll('input')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'change',\n          this.handleInputChange.bind(null, model)\n        )\n      );\n  }\n\n  public handleInputChange(model: ModelType, evt: Event): void {}\n}\n","import AbstractView from './abstract-view';\nimport { VERTICAL } from '../../const';\nimport { ModelType, StateType } from '../../types';\n\nexport default class ScaleView extends AbstractView {\n  getClassName(state: StateType) {\n    const { view } = state;\n    let listVertical = '';\n\n    if (view === VERTICAL) listVertical = 'slider__list_transformed';\n\n    return `slider__list ${listVertical}`;\n  }\n\n  getTemplate(state: StateType) {\n    const { min, max, step, view } = state;\n    let template: string = '';\n    let itemVertical = '';\n\n    if (view === VERTICAL) itemVertical = 'slider__item_transformed';\n\n    for (let i = min; i <= max; i += step) {\n      let itemPlace = '';\n      if (i === min) itemPlace = 'slider__item_minimum';\n      if (i === max) itemPlace = 'slider__item_maximum';\n\n      template += `\n        <div class=\"slider__item\">|\n          <span class=\"slider__item_centered ${itemPlace} ${itemVertical}\">${i}</span>\n        </div>\n      `;\n    }\n\n    if (template.indexOf(String(max), template.length - 50) === -1) {\n      template += `\n        <div class=\"slider__item\">|\n          <span class=\"slider__item_centered slider__item_maximum ${itemVertical}\">${max}</span>\n        </div>\n      `;\n    }\n\n    return template;\n  }\n\n  bind(model: ModelType) {\n    this.getElement(model)\n      .querySelectorAll('.slider__item')\n      .forEach((elem) =>\n        elem.addEventListener('click', this.handleItemClick.bind(null, model))\n      );\n  }\n\n  public handleItemClick(model: ModelType, evt: Event): void {}\n}\n","import AbstractView from './abstract-view';\nimport { NULL_VALUE, RANGE, HORIZONTAL, VERTICAL } from '../../const';\nimport { ModelType, StateType } from '../../types';\n\nexport default class FlagView extends AbstractView {\n  getClassName() {\n    return 'slider__flags';\n  }\n\n  getTemplate(state: StateType) {\n    const { range, view, fromPercent, from, min, toPercent, to, max } = state;\n    let flagMin = '';\n    let flagMax = 'slider__flag_maximum';\n    let position = 'left';\n    const rangeBol = range === RANGE;\n    const viewHBol = view === HORIZONTAL;\n    const viewVBol = view === VERTICAL;\n    const rangeAndViewH = rangeBol && viewHBol;\n    const rangeAndViewV = rangeBol && viewVBol;\n\n    if (rangeAndViewH) {\n      flagMin = `<span class=\"slider__flag slider__flag_minimum\" style=\"left:${fromPercent}%\">${\n        from === NULL_VALUE ? min : from\n      }</span>`;\n    }\n\n    if (rangeAndViewV) {\n      flagMin = `<span class=\"slider__flag slider__flag-vertical slider__flag-vertical_minimum\" style=\"top:${fromPercent}%\">${\n        from === NULL_VALUE ? min : from\n      }</span>`;\n    }\n\n    if (viewVBol) {\n      flagMax = 'slider__flag-vertical slider__flag-vertical_maximum';\n      position = 'top';\n    }\n\n    return `\n      ${flagMin}\n      <span class=\"slider__flag ${flagMax}\" style=\"${position}:${toPercent}%\">${\n      to === NULL_VALUE ? max : to\n    }</span>\n    `;\n  }\n\n  bind(model: ModelType) {\n    this.getElement(model)\n      .querySelectorAll('.slider__flag')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'touchstart',\n          this.handleFlagMouseDown.bind(null, model)\n        )\n      );\n    this.getElement(model)\n      .querySelectorAll('.slider__flag')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'mousedown',\n          this.handleFlagMouseDown.bind(null, model)\n        )\n      );\n  }\n\n  public handleFlagMouseDown(model: ModelType, evt: Event): void {}\n}\n"],"sourceRoot":""}