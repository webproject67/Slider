{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/const.ts","webpack:///./src/scripts/components/view/Abstract-view.ts","webpack:///./src/scripts/components/observer/Observer.ts","webpack:///./src/scripts/index.ts","webpack:///./src/scripts/slider-jquery.ts","webpack:///./src/scripts/components/presenter/Presenter.ts","webpack:///./src/scripts/components/model/Model.ts","webpack:///./src/scripts/components/view/View.ts","webpack:///./src/scripts/components/view/Track-view.ts","webpack:///./src/scripts/components/view/Progress-view.ts","webpack:///./src/scripts/components/view/Configuring-view.ts","webpack:///./src/scripts/components/view/Scale-view.ts","webpack:///./src/scripts/components/view/Flag-view.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NULL_VALUE","VERTICAL","HORIZONTAL","ONE","RANGE","FLAG","PROGRESS","MAX","MIN","SCALE","STEP","VIEW","TOGGLE_MINIMUM","TOGGLE_MAXIMUM","TOGGLE_VERTICAL_MINIMUM","TOGGLE_VERTICAL_MAXIMUM","ITEM","ITEM_MINIMUM","ITEM_MAXIMUM","getElement","state","this","elem","render","getUpdatedElement","getClassName","getRandomNumber","Math","floor","random","getTemplate","createElement","template","className","newElement","document","innerHTML","observers","subscribe","fn","push","broadcast","keys","values","forEach","subscriber","presenter","$","slider","options","obj","model","getState","setValue","extend","flag","from","fromPercent","max","min","progress","range","draft","start","configuring","scale","step","to","toPercent","view","each","main","init","bool","updateView","Number","String","Boolean","importModules","importHandlers","showTrackView","showProgressView","showConfiguringView","showScaleView","showFlagView","replaceScreenConfiguring","replaceScreenProgress","replaceScreenScale","replaceScreenFlag","replaceScreenTrack","getPercentScale","getStepCount","stepCount","stepPercent","ceil","percent","corner","str","stepPercentResult","round","getStepValue","val","generalValue","abs","getValue","firstValue","secondValue","toFixed","boolFrom","boolMinMax","handleFlagMouseDown","evt","toggle","currentTarget","parentElement","flagClassNames","split","length","querySelector","replaceToggle","handleInputChange","input","inputMin","dataset","inputMax","inputStep","updateMinValue","updateMaxValue","updateStepValue","inputFlag","inputScale","inputProgress","checked","handleItemClick","stepList","boxLeft","offsetLeft","boxRight","clientWidth","boxTop","offsetTop","boxBottom","clientHeight","sliderLeft","window","pageXOffset","sliderWidth","sliderHeight","pageY","pageX","parseFloat","style","left","children","handleToggleMouseDown","configuringView","flagView","progressView","handleBarClick","scaleView","trackView","mouseMoveX","type","search","touches","setFromValue","setToValue","setPosition","mouseMoveY","replaceWith","preventDefault","onMouseMove","toggleMin","toggleMax","onMouseUp","removeEventListener","addEventListener","position","valuePercent","element","top","textContent","appendChild","items","querySelectorAll","it","item","display","valueStart","innerWithHeight","scaleWithHeight","rangeBool","viewHBool","viewVBool","bar","viewID","rangeID","fromTemplate","toTemplate","listVertical","itemVertical","itemPlace","indexOf","flagMin","flagMax","rangeAndViewV"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","const NULL_VALUE = -10000;\r\nconst VERTICAL = 'vertical';\r\nconst HORIZONTAL = 'horizontal';\r\nconst ONE = 'one';\r\nconst RANGE = 'range';\r\nconst FLAG = 'flag';\r\nconst PROGRESS = 'progress';\r\nconst MAX = 'max';\r\nconst MIN = 'min';\r\nconst SCALE = 'scale';\r\nconst STEP = 'step';\r\nconst VIEW = 'view';\r\nconst TOGGLE_MINIMUM = 'slider__toggle_minimum';\r\nconst TOGGLE_MAXIMUM = 'slider__toggle_maximum';\r\nconst TOGGLE_VERTICAL_MINIMUM = 'slider__toggle_vertical-minimum';\r\nconst TOGGLE_VERTICAL_MAXIMUM = 'slider__toggle_vertical-maximum';\r\nconst ITEM = 'slider__item';\r\nconst ITEM_MINIMUM = 'slider__item_minimum';\r\nconst ITEM_MAXIMUM = 'slider__item_maximum';\r\n\r\nexport {\r\n  NULL_VALUE,\r\n  VERTICAL,\r\n  HORIZONTAL,\r\n  ONE,\r\n  RANGE,\r\n  FLAG,\r\n  PROGRESS,\r\n  MAX,\r\n  MIN,\r\n  SCALE,\r\n  STEP,\r\n  VIEW,\r\n  TOGGLE_MINIMUM,\r\n  TOGGLE_MAXIMUM,\r\n  TOGGLE_VERTICAL_MINIMUM,\r\n  TOGGLE_VERTICAL_MAXIMUM,\r\n  ITEM,\r\n  ITEM_MINIMUM,\r\n  ITEM_MAXIMUM,\r\n};\r\n","import StateType from '../../StateType';\n\nexport default abstract class AbstractView {\n  private elem: HTMLElement | undefined;\n\n  public getElement(state: StateType): HTMLElement {\n    if (this.elem) {\n      return this.elem;\n    }\n    this.elem = this.render(state);\n    this.bind(state);\n    return this.elem;\n  }\n\n  public getUpdatedElement(state: StateType): HTMLElement {\n    this.elem = this.render(state);\n    this.bind(state);\n    return this.elem;\n  }\n\n  protected getClassName(state: StateType): string {\n    return '';\n  }\n\n  protected getRandomNumber(): number {\n    const min = 0;\n    const max = 10000;\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  protected getTemplate(state: StateType): string {\n    return '';\n  }\n\n  protected bind(state: StateType): void {}\n\n  private createElement(template: string, className: string): HTMLElement {\n    const newElement: HTMLElement = document.createElement('div');\n    newElement.className = className;\n    newElement.innerHTML = template;\n    return newElement;\n  }\n\n  private render(state: StateType): HTMLElement {\n    return this.createElement(\n      this.getTemplate(state),\n      this.getClassName(state)\n    );\n  }\n}\n","import StateType from '../../StateType';\n\nexport default class Observer {\n  private observers: Function[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  public subscribe(fn: Function) {\n    this.observers.push(fn);\n  }\n\n  public broadcast(\n    keys: string[] | StateType,\n    values?: (number | string | boolean)[] | boolean\n  ) {\n    this.observers.forEach((subscriber) => subscriber(keys, values));\n  }\n}\n","import './slider-jquery';\nimport '../styles/style.scss';\n","import Presenter from './components/presenter/Presenter';\n\nlet presenter: Presenter;\n$.fn.slider = function f(options: object | string, obj?: object) {\n  if (options === 'getState') return presenter.model.getState();\n  if (options === 'setState') {\n    const keys = Object.keys(obj!);\n    const values = Object.values(obj!);\n    presenter.model.setValue(keys, values);\n    return null;\n  }\n  if (options === 'getConfiguring') {\n    presenter.model.setValue(['configuring'], [1]);\n    return null;\n  }\n\n  const state = $.extend(\n    {\n      flag: true,\n      from: -10000,\n      fromPercent: 0,\n      max: 100,\n      min: 0,\n      progress: true,\n      range: 'one',\n      draft: 0,\n      start: 1,\n      configuring: 0,\n      scale: true,\n      step: 1,\n      to: -10000,\n      toPercent: 100,\n      view: 'horizontal',\n    },\n    options\n  );\n\n  const cb = () => {\n    presenter = new Presenter(this[0], state);\n  };\n\n  return this.each(cb);\n};\n","import Model from '../model/Model';\nimport View from '../view/View';\nimport StateType from '../../StateType';\n\nexport default class Presenter {\n  public model: Model;\n\n  private view: View;\n\n  constructor(main: HTMLElement, state: StateType) {\n    this.model = new Model(state);\n    this.view = new View(main);\n    this.init();\n  }\n\n  private init() {\n    const cbView = (keys: string[], values: (number | string | boolean)[]) => {\n      this.model.setValue(keys, values);\n    };\n    this.view.subscribe(cbView);\n\n    const cbModel = (state: StateType, bool: boolean) =>\n      this.view.updateView(state, bool);\n    this.model.subscribe(cbModel);\n\n    this.model.broadcast(this.model.state);\n  }\n}\n","import Observer from '../observer/Observer';\nimport StateType from '../../StateType';\n\nexport default class Model extends Observer {\n  public state: StateType;\n\n  constructor(state: StateType) {\n    super();\n    this.state = state;\n  }\n\n  public getState(): StateType {\n    return this.state;\n  }\n\n  public setValue(keys: string[], values: (number | string | boolean)[]) {\n    keys.forEach((key, i) => {\n      switch (key) {\n        case 'min':\n          this.state.min = Number(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'max':\n          this.state.max = Number(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'step':\n          this.state.step = Number(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'to':\n          this.state.to = Number(values[i]);\n          this.broadcast(this.state, true);\n          break;\n        case 'toPercent':\n          this.state.toPercent = Number(values[i]);\n          this.broadcast(this.state, true);\n          break;\n        case 'draft':\n          this.state.draft = Number(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'start':\n          this.state.start = Number(values[i]);\n          break;\n        case 'configuring':\n          this.state.configuring = Number(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'from':\n          this.state.from = Number(values[i]);\n          this.broadcast(this.state, true);\n          break;\n        case 'fromPercent':\n          this.state.fromPercent = Number(values[i]);\n          this.broadcast(this.state, true);\n          break;\n        case 'view':\n          this.state.view = String(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'range':\n          this.state.range = String(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'flag':\n          this.state.flag = Boolean(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'progress':\n          this.state.progress = Boolean(values[i]);\n          this.broadcast(this.state);\n          break;\n        case 'scale':\n          this.state.scale = Boolean(values[i]);\n          this.broadcast(this.state);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n}\n","import Observer from '../observer/Observer';\nimport TrackView from './Track-view';\nimport ProgressView from './Progress-view';\nimport ConfiguringView from './Configuring-view';\nimport ScaleView from './Scale-view';\nimport FlagView from './Flag-view';\nimport {\n  MIN,\n  MAX,\n  STEP,\n  VIEW,\n  RANGE,\n  FLAG,\n  SCALE,\n  PROGRESS,\n  TOGGLE_MINIMUM,\n  TOGGLE_MAXIMUM,\n  TOGGLE_VERTICAL_MINIMUM,\n  TOGGLE_VERTICAL_MAXIMUM,\n  ITEM,\n  ITEM_MINIMUM,\n  ITEM_MAXIMUM,\n  HORIZONTAL,\n} from '../../const';\nimport StateType from '../../StateType';\n\nexport default class Views extends Observer {\n  public trackView!: TrackView;\n\n  public progressView!: ProgressView;\n\n  public configuringView!: ConfiguringView;\n\n  public scaleView!: ScaleView;\n\n  public flagView!: FlagView;\n\n  private main: HTMLElement;\n\n  constructor(main: HTMLElement) {\n    super();\n    this.main = main;\n    this.importModules();\n    this.importHandlers();\n  }\n\n  public updateView(state: StateType, bool: boolean) {\n    if (state.start) {\n      this.showTrackView(state);\n      this.showProgressView(state);\n      this.showConfiguringView(state);\n      this.showScaleView(state);\n      this.showFlagView(state);\n      this.broadcast(['start'], [0]);\n      return;\n    }\n\n    if (bool) {\n      this.replaceScreenConfiguring(state);\n      this.replaceScreenProgress(state);\n      return;\n    }\n\n    this.replaceScreenScale(state);\n    this.replaceScreenFlag(state);\n    this.replaceScreenProgress(state);\n    this.replaceScreenConfiguring(state);\n    this.replaceScreenTrack(state);\n    this.showScaleView(state);\n    this.showProgressView(state);\n    this.showFlagView(state);\n    this.showConfiguringView(state);\n  }\n\n  private getPercentScale(state: StateType) {\n    const { stepCount, stepPercent } = this.getStepCount(state, 0);\n    let scale = 1;\n    if (stepCount > 20) scale = Math.ceil(stepCount / 20);\n    const percent = stepPercent * scale;\n    return {\n      percent,\n      stepPercent,\n      scale,\n    };\n  }\n\n  private getStepCount(state: StateType, corner: number, str?: string) {\n    const { min, max, step, toPercent, fromPercent } = state;\n    const stepCount: number = (max - min) / step;\n    const stepPercent: number = 100 / stepCount;\n    let stepPercentResult: number =\n      Math.round(corner / stepPercent) * stepPercent;\n    if (stepPercentResult < 0) stepPercentResult = 0;\n    if (corner > 100 || stepPercentResult > 100) stepPercentResult = 100;\n    if (str === 'toPercent') {\n      if (stepPercentResult > toPercent) stepPercentResult = toPercent;\n    }\n    if (str === 'fromPercent') {\n      if (fromPercent > stepPercentResult) stepPercentResult = fromPercent;\n    }\n    return {\n      stepCount,\n      stepPercent,\n      stepPercentResult,\n    };\n  }\n\n  private getStepValue(state: StateType, val: number) {\n    let value = val;\n    const { min, max } = state;\n    const generalValue = max - min;\n    if (value === 0) value = 1;\n    if (value < 0) value = Math.abs(value);\n    if (value > generalValue) value = generalValue;\n    return value;\n  }\n\n  private getValue(\n    state: StateType,\n    percent: number,\n    firstValue?: number | null,\n    secondValue?: number | null\n  ) {\n    const { min, max, fromPercent } = state;\n    const { stepPercent } = this.getStepCount(state, 0);\n    const value =\n      Number(((percent / stepPercent) * state.step).toFixed()) + state.min;\n    const boolFrom = percent >= fromPercent;\n    const boolMinMax = (firstValue || min) >= (secondValue || max);\n    return {\n      min,\n      max,\n      value,\n      boolFrom,\n      boolMinMax,\n    };\n  }\n\n  private handleFlagMouseDown(state: StateType, evt: Event): void {\n    const flag: HTMLElement = <HTMLElement>evt.currentTarget;\n    const slider: HTMLElement = flag.parentElement!.parentElement!;\n    const flagClassNames = flag.className.split(' ');\n    const flagClassNamesLength = flagClassNames.length;\n    let toggle!: HTMLElement;\n\n    switch (flagClassNames[flagClassNamesLength - 1]) {\n      case 'slider__flag_minimum':\n        toggle = slider.querySelector('.slider__toggle_minimum')!;\n        break;\n      case 'slider__flag_maximum':\n        toggle = slider.querySelector('.slider__toggle_maximum')!;\n        break;\n      case 'slider__flag-vertical_minimum':\n        toggle = slider.querySelector('.slider__toggle_vertical-minimum')!;\n        break;\n      case 'slider__flag-vertical_maximum':\n        toggle = slider.querySelector('.slider__toggle_vertical-maximum')!;\n        break;\n      default:\n        break;\n    }\n\n    this.replaceToggle(state, evt, toggle);\n  }\n\n  private handleInputChange(state: StateType, evt: Event): void {\n    const input: HTMLElement = <HTMLElement>evt.currentTarget;\n    const inputMin = input.dataset.name === MIN;\n    const inputMax = input.dataset.name === MAX;\n    const inputStep = input.dataset.name === STEP;\n    const generalInput = inputMin || inputMax || inputStep;\n\n    if (generalInput) {\n      this.updateMinValue(state, input);\n      this.updateMaxValue(state, input);\n      this.updateStepValue(state, input);\n    }\n\n    if (input.dataset.name === VIEW) {\n      this.broadcast([input.dataset.name], [(<HTMLInputElement>input).value]);\n    }\n\n    if (input.dataset.name === RANGE) {\n      const { min } = this.getValue(state, 0);\n      this.broadcast(\n        [input.dataset.name, 'from', 'fromPercent'],\n        [(<HTMLInputElement>input).value, min, 0]\n      );\n    }\n\n    const inputFlag = input.dataset.name === FLAG;\n    const inputScale = input.dataset.name === SCALE;\n    const inputProgress = input.dataset.name === PROGRESS;\n    const generalInput2 = inputFlag || inputScale || inputProgress;\n\n    if (generalInput2) {\n      this.broadcast(\n        [input.dataset.name!],\n        [(<HTMLInputElement>input).checked]\n      );\n    }\n  }\n\n  private handleItemClick(\n    state: StateType,\n    evt: Event & { pageX?: number; pageY?: number }\n  ): void {\n    const scale: HTMLElement = <HTMLElement>evt.currentTarget;\n    const stepList: HTMLElement = scale.parentElement!;\n    const slider: HTMLElement = stepList.parentElement!;\n    const boxLeft: number = slider.offsetLeft;\n    const boxRight: number = boxLeft + slider.clientWidth;\n    const boxTop: number = slider.offsetTop;\n    const boxBottom: number = boxTop + slider.clientHeight;\n    const sliderLeft: number = boxLeft + window.pageXOffset;\n    const sliderWidth: number = boxRight - boxLeft;\n    const sliderHeight: number = boxBottom - boxTop;\n    let corner: number;\n\n    if (stepList.className.split(' ')[1]) {\n      corner = ((evt.pageY! - boxTop) / sliderHeight) * 100;\n    } else {\n      corner = ((evt.pageX! - sliderLeft) / sliderWidth) * 100;\n    }\n\n    if (scale.className === ITEM) corner = parseFloat(scale.style.left);\n\n    let { stepPercentResult } = this.getStepCount(state, corner);\n\n    if (scale.children.length) {\n      if (scale.children[0].className.split(' ')[1] === ITEM_MINIMUM)\n        stepPercentResult = 0;\n      if (scale.children[0].className.split(' ')[1] === ITEM_MAXIMUM)\n        stepPercentResult = 100;\n    }\n    const { value, boolFrom } = this.getValue(state, stepPercentResult);\n\n    if (boolFrom) {\n      this.broadcast(\n        ['toPercent', 'to', 'draft'],\n        [stepPercentResult, value, 0]\n      );\n    } else {\n      this.broadcast(\n        ['fromPercent', 'from', 'draft'],\n        [stepPercentResult, value, 0]\n      );\n    }\n  }\n\n  private handleToggleMouseDown(state: StateType, evt: Event): void {\n    const toggle: HTMLElement = <HTMLElement>evt.currentTarget;\n    this.replaceToggle(state, evt, toggle);\n  }\n\n  private importHandlers(): void {\n    this.configuringView.handleInputChange = (state, evt) => {\n      this.handleInputChange(state, evt);\n    };\n\n    this.flagView.handleFlagMouseDown = (state, evt) => {\n      this.handleFlagMouseDown(state, evt);\n    };\n\n    this.progressView.handleBarClick = (state, evt) => {\n      this.handleItemClick(state, evt);\n    };\n\n    this.scaleView.handleItemClick = (state, evt) => {\n      this.handleItemClick(state, evt);\n    };\n\n    this.trackView.handleToggleMouseDown = (state, evt) => {\n      this.handleToggleMouseDown(state, evt);\n    };\n  }\n\n  private importModules(): void {\n    this.trackView = new TrackView();\n    this.progressView = new ProgressView();\n    this.configuringView = new ConfiguringView();\n    this.scaleView = new ScaleView();\n    this.flagView = new FlagView();\n  }\n\n  private mouseMoveX(\n    state: StateType,\n    evt: Event & { touches?: TouchList; pageX?: number },\n    slider: HTMLElement,\n    toggle: HTMLElement\n  ) {\n    const boxLeft: number = slider.offsetLeft;\n    const boxRight: number = boxLeft + slider.clientWidth;\n    const sliderLeft: number = boxLeft + window.pageXOffset;\n    const sliderWidth: number = boxRight - boxLeft;\n    let value!: number;\n    let stepPercentResult!: number;\n    let flag!: HTMLElement;\n    const getEvent = () =>\n      evt.type.search('touch') !== -1 ? evt.touches![0] : evt;\n    const event = getEvent();\n    const corner: number = ((event.pageX! - sliderLeft) / sliderWidth) * 100;\n\n    if (toggle.className.split(' ')[1] === TOGGLE_MINIMUM) {\n      value = this.setFromValue(state, corner).value;\n      stepPercentResult = this.setFromValue(state, corner).stepPercentResult;\n      flag = <HTMLElement>slider.querySelector('.slider__flag_minimum');\n    }\n\n    if (toggle.className.split(' ')[1] === TOGGLE_MAXIMUM) {\n      value = this.setToValue(state, corner).value;\n      stepPercentResult = this.setToValue(state, corner).stepPercentResult;\n      flag = <HTMLElement>slider.querySelector('.slider__flag_maximum');\n    }\n    if (flag)\n      this.setPosition(flag, 'horizontal', stepPercentResult, String(value));\n    this.setPosition(toggle, 'horizontal', stepPercentResult);\n  }\n\n  private mouseMoveY(\n    state: StateType,\n    evt: Event & { touches?: TouchList; pageY?: number },\n    slider: HTMLElement,\n    toggle: HTMLElement\n  ) {\n    const boxTop: number = slider.offsetTop;\n    const boxBottom: number = boxTop + slider.clientHeight;\n    const sliderHeight: number = boxBottom - boxTop;\n    let value!: number;\n    let stepPercentResult!: number;\n    let flag!: HTMLElement;\n    const getEvent = () =>\n      evt.type.search('touch') !== -1 ? evt.touches![0] : evt;\n    const event = getEvent();\n    const corner: number = ((event.pageY! - boxTop) / sliderHeight) * 100;\n\n    if (toggle.className.split(' ')[1] === TOGGLE_VERTICAL_MINIMUM) {\n      value = this.setFromValue(state, corner).value;\n      stepPercentResult = this.setFromValue(state, corner).stepPercentResult;\n      flag = <HTMLElement>(\n        slider.querySelector('.slider__flag-vertical_minimum')\n      );\n    }\n\n    if (toggle.className.split(' ')[1] === TOGGLE_VERTICAL_MAXIMUM) {\n      value = this.setToValue(state, corner).value;\n      stepPercentResult = this.setToValue(state, corner).stepPercentResult;\n      flag = <HTMLElement>(\n        slider.querySelector('.slider__flag-vertical_maximum')\n      );\n    }\n    if (flag)\n      this.setPosition(flag, 'vertical', stepPercentResult, String(value));\n    this.setPosition(toggle, 'vertical', stepPercentResult);\n  }\n\n  private replaceScreenConfiguring(state: StateType): void {\n    this.configuringView\n      .getElement(state)\n      .replaceWith(this.configuringView.getUpdatedElement(state));\n  }\n\n  private replaceScreenFlag(state: StateType): void {\n    this.flagView\n      .getElement(state)\n      .replaceWith(this.flagView.getUpdatedElement(state));\n  }\n\n  private replaceScreenProgress(state: StateType): void {\n    this.progressView\n      .getElement(state)\n      .replaceWith(this.progressView.getUpdatedElement(state));\n  }\n\n  private replaceScreenScale(state: StateType): void {\n    this.scaleView\n      .getElement(state)\n      .replaceWith(this.scaleView.getUpdatedElement(state));\n  }\n\n  private replaceScreenTrack(state: StateType): void {\n    this.trackView\n      .getElement(state)\n      .replaceWith(this.trackView.getUpdatedElement(state));\n  }\n\n  private replaceToggle(\n    state: StateType,\n    evt: Event,\n    toggle: HTMLElement\n  ): void {\n    evt.preventDefault();\n    const slider: HTMLElement = toggle.parentElement!;\n    let onMouseMove: { (evt: Event): void };\n    const toggleMin = toggle.className.split(' ')[1] === TOGGLE_MINIMUM;\n    const toggleMax = toggle.className.split(' ')[1] === TOGGLE_MAXIMUM;\n    const toggleBool = toggleMin || toggleMax;\n\n    if (toggleBool) {\n      onMouseMove = (evt: Event): void =>\n        this.mouseMoveX(state, evt, slider, toggle);\n    } else {\n      onMouseMove = (evt: Event): void =>\n        this.mouseMoveY(state, evt, slider, toggle);\n    }\n\n    const onMouseUp = () => {\n      document.removeEventListener('touchmove', onMouseMove);\n      document.removeEventListener('mousemove', onMouseMove);\n      document.removeEventListener('touchend', onMouseUp);\n      document.removeEventListener('mouseup', onMouseUp);\n    };\n\n    document.addEventListener('touchmove', onMouseMove);\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('touchend', onMouseUp);\n    document.addEventListener('mouseup', onMouseUp);\n  }\n\n  private setFromValue(state: StateType, corner: number) {\n    const { stepPercentResult } = this.getStepCount(state, corner, 'toPercent');\n    const { value } = this.getValue(state, stepPercentResult);\n    this.broadcast(['fromPercent', 'from'], [stepPercentResult, value]);\n    return {\n      value,\n      stepPercentResult,\n    };\n  }\n\n  private setPosition(\n    elem: HTMLElement,\n    position: string,\n    valuePercent: number,\n    value?: string\n  ) {\n    const element = elem;\n    if (position === HORIZONTAL) {\n      element.style.left = `${String(valuePercent)}%`;\n    } else {\n      element.style.top = `${String(valuePercent)}%`;\n    }\n    if (value) element.textContent = value;\n  }\n\n  private setToValue(state: StateType, corner: number) {\n    const { stepPercentResult } = this.getStepCount(\n      state,\n      corner,\n      'fromPercent'\n    );\n    const { value } = this.getValue(state, stepPercentResult);\n    this.broadcast(['toPercent', 'to'], [stepPercentResult, value]);\n    return {\n      value,\n      stepPercentResult,\n    };\n  }\n\n  private showConfiguringView(state: StateType): void {\n    if (state.configuring) {\n      this.main\n        .querySelector('.slider__wrapper')!\n        .appendChild(this.configuringView.getElement(state));\n    }\n  }\n\n  private showFlagView(state: StateType): void {\n    if (state.flag) {\n      this.main\n        .querySelector('.slider__inner')!\n        .appendChild(this.flagView.getElement(state));\n    }\n  }\n\n  private showProgressView(state: StateType): void {\n    if (state.progress) {\n      this.main\n        .querySelector('.slider__scale')!\n        .appendChild(this.progressView.getElement(state));\n    }\n  }\n\n  private showScaleView(state: StateType): void {\n    if (state.scale) {\n      this.main\n        .querySelector('.slider__inner')!\n        .appendChild(this.scaleView.getElement(state));\n      const items = this.main\n        .querySelector('.slider__inner')!\n        .querySelectorAll('.slider__item:not(:first-child):not(:last-child)');\n      let { percent } = this.getPercentScale(state);\n      const { stepPercent, scale } = this.getPercentScale(state);\n      items.forEach((it) => {\n        const item = it;\n        if (percent > 99) {\n          (<HTMLElement>item).style.display = 'none';\n          return;\n        }\n        const { value } = this.getValue(state, percent);\n        if (scale !== 1) item.children[0].textContent = String(value);\n        (<HTMLElement>item).style.left = `${percent}%`;\n        percent += stepPercent * scale;\n      });\n    }\n  }\n\n  private showTrackView(state: StateType): void {\n    this.main.appendChild(this.trackView.getElement(state));\n  }\n\n  private updateMaxValue(state: StateType, input: HTMLElement) {\n    const max: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__max')\n      )).value\n    );\n    const { min, boolMinMax } = this.getValue(state, 0, null, max);\n    if (boolMinMax) {\n      this.broadcast(['max', 'to', 'toPercent'], [min + 1, min + 1, 100]);\n    } else {\n      this.broadcast(['max', 'to', 'toPercent'], [max, max, 100]);\n    }\n  }\n\n  private updateMinValue(state: StateType, input: HTMLElement) {\n    const min: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__min')\n      )).value\n    );\n    const { max, boolMinMax } = this.getValue(state, 0, min, null);\n    if (boolMinMax) {\n      this.broadcast(['min', 'from', 'fromPercent'], [max - 1, max - 1, 0]);\n    } else {\n      this.broadcast(['min', 'from', 'fromPercent'], [min, min, 0]);\n    }\n  }\n\n  private updateStepValue(state: StateType, input: HTMLElement) {\n    const valueStart: number = Number(\n      (<HTMLInputElement>(\n        input.parentElement!.parentElement!.querySelector('.slider__step')\n      )).value\n    );\n    const value = this.getStepValue(state, valueStart);\n    this.broadcast(['step'], [value]);\n  }\n}\n","import AbstractView from './Abstract-view';\nimport { RANGE, HORIZONTAL, VERTICAL } from '../../const';\nimport StateType from '../../StateType';\n\nexport default class TrackView extends AbstractView {\n  getClassName() {\n    return 'slider__wrapper';\n  }\n\n  getTemplate(state: StateType) {\n    const { fromPercent, toPercent, range, view } = state;\n    let innerWithHeight = '';\n    let scaleWithHeight = '';\n    let toggleMin = '';\n    let toggleMax = 'slider__toggle_maximum';\n    let position = 'left';\n    const rangeBool = range === RANGE;\n    const viewHBool = view === HORIZONTAL;\n    const viewVBool = view === VERTICAL;\n    const rangeAndViewH = rangeBool && viewHBool;\n    const rangeAndViewV = rangeBool && viewVBool;\n\n    if (rangeAndViewH) {\n      toggleMin = `<div class=\"slider__toggle slider__toggle_minimum\" style=\"left:${fromPercent}%\"></div>`;\n    }\n\n    if (rangeAndViewV) {\n      toggleMin = `<div class=\"slider__toggle slider__toggle_vertical-minimum\" style=\"top:${fromPercent}%\"></div>`;\n    }\n\n    if (viewVBool) {\n      innerWithHeight = 'slider__inner_with-height';\n      scaleWithHeight = 'slider__scale_with-height';\n      toggleMax = 'slider__toggle_vertical-maximum';\n      position = 'top';\n    }\n\n    return `\n      <div class=\"slider__inner ${innerWithHeight}\">\n        <div class=\"slider__scale ${scaleWithHeight}\">\n        </div>\n        ${toggleMin}\n        <div class=\"slider__toggle ${toggleMax}\" style=\"${position}:${toPercent}%\"></div>\n      </div>\n    `;\n  }\n\n  bind(state: StateType) {\n    this.getElement(state)\n      .querySelectorAll('.slider__toggle')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'touchstart',\n          this.handleToggleMouseDown.bind(null, state)\n        )\n      );\n    this.getElement(state)\n      .querySelectorAll('.slider__toggle')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'mousedown',\n          this.handleToggleMouseDown.bind(null, state)\n        )\n      );\n  }\n\n  public handleToggleMouseDown(state: StateType, evt: Event): void {}\n}\n","import AbstractView from './Abstract-view';\nimport { VERTICAL } from '../../const';\nimport StateType from '../../StateType';\n\nexport default class ProgressView extends AbstractView {\n  getClassName() {\n    return 'slider__bars';\n  }\n\n  getTemplate(state: StateType) {\n    const { fromPercent, toPercent, view } = state;\n    let bar = `<div class=\"slider__bar\" style=\"margin-left:${fromPercent}%;margin-right:${\n      100 - toPercent\n    }%\"></div>`;\n\n    if (view === VERTICAL) {\n      bar = `<div class=\"slider__bar slider__bar_with-width\" style=\"top:${fromPercent}%;height:${\n        toPercent - fromPercent\n      }%\"></div>`;\n    }\n\n    return `${bar}`;\n  }\n\n  bind(state: StateType) {\n    this.getElement(state).addEventListener(\n      'click',\n      this.handleBarClick.bind(null, state)\n    );\n  }\n\n  public handleBarClick(state: StateType, evt: Event): void {}\n}\n","import AbstractView from './Abstract-view';\nimport { NULL_VALUE, HORIZONTAL, VERTICAL, ONE, RANGE } from '../../const';\nimport StateType from '../../StateType';\n\nexport default class ConfiguringView extends AbstractView {\n  viewID: number;\n\n  rangeID: number;\n\n  constructor() {\n    super();\n    this.viewID = this.getRandomNumber();\n    this.rangeID = this.getRandomNumber();\n  }\n\n  getClassName() {\n    return 'slider__labels';\n  }\n\n  getTemplate(state: StateType) {\n    const { range, from, min, max, to, step, view, flag, scale, progress } =\n      state;\n    let fromTemplate = '';\n    let toTemplate = 'Текущее значение';\n\n    if (range === RANGE) {\n      fromTemplate = `\n        <label class=\"slider__label slider__label_state_displayed\">От\n          <input data-name=\"from\" class=\"slider__from\" type=\"number\" value=${\n            from === NULL_VALUE ? min : from\n          } readonly>\n        </label>\n      `;\n      toTemplate = 'До';\n    }\n\n    return `\n      <label class=\"slider__label slider__label_state_displayed\">Минимальное значение\n        <input data-name=\"min\" class=\"slider__min\" type=\"number\" value=${min}>\n      </label>\n      <label class=\"slider__label slider__label_state_displayed\">Максимальное значение\n        <input data-name=\"max\" class=\"slider__max\" type=\"number\" value=${max}>\n      </label>\n      ${fromTemplate}\n      <label class=\"slider__label slider__label_state_displayed\">${toTemplate}\n        <input data-name=\"to\" class=\"slider__to\" type=\"number\" value=${\n          to === NULL_VALUE ? max : to\n        } readonly>\n      </label>\n      <label class=\"slider__label slider__label_state_displayed\">Шаг\n        <input data-name=\"step\" class=\"slider__step\" type=\"number\" value=${step}>\n      </label>\n      <div class=\"slider__radio\">\n        <label class=\"slider__label\">Горизонтальный\n          <input data-name=\"view\" class=\"slider__view\" type=\"radio\" name=\"view${\n            this.viewID\n          }\" value=\"horizontal\" ${view === HORIZONTAL ? 'checked' : ''}>\n        </label>\n        <label class=\"slider__label\">Вертикальный\n          <input data-name=\"view\" class=\"slider__view\" type=\"radio\" name=\"view${\n            this.viewID\n          }\" value=\"vertical\" ${view === VERTICAL ? 'checked' : ''}>\n        </label>\n      </div>\n      <div class=\"slider__radio\">\n        <label class=\"slider__label\">Одиночное значение\n          <input data-name=\"range\" class=\"slider__range\" type=\"radio\" name=\"range${\n            this.rangeID\n          }\" value=\"one\" ${range === ONE ? 'checked' : ''}>\n        </label>\n        <label class=\"slider__label\">Интервал\n          <input data-name=\"range\" class=\"slider__range\" type=\"radio\" name=\"range${\n            this.rangeID\n          }\" value=\"range\" ${range === RANGE ? 'checked' : ''}>\n        </label>\n      </div>\n      <label class=\"slider__label\">Значение\n        <input data-name=\"flag\" class=\"slider__flag-checkbox\" type=\"checkbox\" ${\n          flag ? 'checked' : ''\n        }>\n      </label>\n      <label class=\"slider__label\">Шкала\n        <input data-name=\"scale\" class=\"slider__scale-checkbox\" type=\"checkbox\" ${\n          scale ? 'checked' : ''\n        }>\n      </label>\n      <label class=\"slider__label\">Прогресс\n        <input data-name=\"progress\" class=\"slider__progress\" type=\"checkbox\" ${\n          progress ? 'checked' : ''\n        }>\n      </label>\n    `;\n  }\n\n  bind(state: StateType) {\n    this.getElement(state)\n      .querySelectorAll('input')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'change',\n          this.handleInputChange.bind(null, state)\n        )\n      );\n  }\n\n  public handleInputChange(state: StateType, evt: Event): void {}\n}\n","import AbstractView from './Abstract-view';\nimport { VERTICAL } from '../../const';\nimport StateType from '../../StateType';\n\nexport default class ScaleView extends AbstractView {\n  getClassName(state: StateType) {\n    const { view } = state;\n    let listVertical = '';\n\n    if (view === VERTICAL) listVertical = 'slider__list_transformed';\n\n    return `slider__list ${listVertical}`;\n  }\n\n  getTemplate(state: StateType) {\n    const { min, max, step, view } = state;\n    let template: string = '';\n    let itemVertical = '';\n\n    if (view === VERTICAL) itemVertical = 'slider__item_transformed';\n\n    for (let i = min; i <= max; i += step) {\n      let itemPlace = '';\n      if (i === min) itemPlace = 'slider__item_minimum';\n      if (i === max) itemPlace = 'slider__item_maximum';\n\n      template += `\n        <div class=\"slider__item\">|\n          <span class=\"slider__item_centered ${itemPlace} ${itemVertical}\">${i}</span>\n        </div>\n      `;\n    }\n\n    if (template.indexOf(String(max), template.length - 50) === -1) {\n      template += `\n        <div class=\"slider__item\">|\n          <span class=\"slider__item_centered slider__item_maximum ${itemVertical}\">${max}</span>\n        </div>\n      `;\n    }\n\n    return template;\n  }\n\n  bind(state: StateType) {\n    this.getElement(state)\n      .querySelectorAll('.slider__item')\n      .forEach((elem) =>\n        elem.addEventListener('click', this.handleItemClick.bind(null, state))\n      );\n  }\n\n  public handleItemClick(state: StateType, evt: Event): void {}\n}\n","import AbstractView from './Abstract-view';\nimport { NULL_VALUE, RANGE, HORIZONTAL, VERTICAL } from '../../const';\nimport StateType from '../../StateType';\n\nexport default class FlagView extends AbstractView {\n  getClassName() {\n    return 'slider__flags';\n  }\n\n  getTemplate(state: StateType) {\n    const { range, view, fromPercent, from, min, toPercent, to, max } = state;\n    let flagMin = '';\n    let flagMax = 'slider__flag_maximum';\n    let position = 'left';\n    const rangeBool = range === RANGE;\n    const viewHBool = view === HORIZONTAL;\n    const viewVBool = view === VERTICAL;\n    const rangeAndViewH = rangeBool && viewHBool;\n    const rangeAndViewV = rangeBool && viewVBool;\n\n    if (rangeAndViewH) {\n      flagMin = `<span class=\"slider__flag slider__flag_minimum\" style=\"left:${fromPercent}%\">${\n        from === NULL_VALUE ? min : from\n      }</span>`;\n    }\n\n    if (rangeAndViewV) {\n      flagMin = `<span class=\"slider__flag slider__flag-vertical slider__flag-vertical_minimum\" style=\"top:${fromPercent}%\">${\n        from === NULL_VALUE ? min : from\n      }</span>`;\n    }\n\n    if (viewVBool) {\n      flagMax = 'slider__flag-vertical slider__flag-vertical_maximum';\n      position = 'top';\n    }\n\n    return `\n      ${flagMin}\n      <span class=\"slider__flag ${flagMax}\" style=\"${position}:${toPercent}%\">${\n      to === NULL_VALUE ? max : to\n    }</span>\n    `;\n  }\n\n  bind(state: StateType) {\n    this.getElement(state)\n      .querySelectorAll('.slider__flag')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'touchstart',\n          this.handleFlagMouseDown.bind(null, state)\n        )\n      );\n    this.getElement(state)\n      .querySelectorAll('.slider__flag')\n      .forEach((elem) =>\n        elem.addEventListener(\n          'mousedown',\n          this.handleFlagMouseDown.bind(null, state)\n        )\n      );\n  }\n\n  public handleFlagMouseDown(state: StateType, evt: Event): void {}\n}\n"],"sourceRoot":""}